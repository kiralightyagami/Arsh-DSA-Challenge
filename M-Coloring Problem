 int[] color = new int[n];

      
        if (solve(0, graph, color, m, n)) {
            return true;
        }
        return false;
    }

  
    private boolean isSafe(int v, boolean graph[][], int[] color, int c, int n) {
        for (int i = 0; i < n; i++) {
           
            if (graph[v][i] && color[i] == c) {
                return false;
            }
        }
        return true;
    }

   
    private boolean solve(int v, boolean graph[][], int[] color, int m, int n) {
        
        if (v == n) {
            return true;
        }

       
        for (int c = 1; c <= m; c++) {
           
            if (isSafe(v, graph, color, c, n)) {
                color[v] = c;

               
                if (solve(v + 1, graph, color, m, n)) {
                    return true;
                }

                
                color[v] = 0;
            }
        }

       
        return false;
