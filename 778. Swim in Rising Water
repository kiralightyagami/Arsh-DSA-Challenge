class Solution {
    public int swimInWater(int[][] grid) {
        int n = grid.length;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)->a[0]-b[0]);
        boolean[][] visited = new boolean[n][n];
        pq.offer(new int[]{grid[0][0], 0,0}); 
        int[] dirs = {0,1,0,-1,0};
        while(!pq.isEmpty()){
            int[] cur = pq.poll();
            int t = cur[0], x=cur[1], y=cur[2];
            if(x==n-1 && y==n-1) return t;
            for(int i=0;i<4;i++){
                int nx = x + dirs[i];
                int ny = y + dirs[i+1];
                if(nx>=0 && nx<n && ny>=0 && ny<n && !visited[nx][ny]){
                    visited[nx][ny]=true;
                    pq.offer(new int[]{Math.max(t, grid[nx][ny]), nx, ny});
                }
            }
        }
        return -1;
    }
}
