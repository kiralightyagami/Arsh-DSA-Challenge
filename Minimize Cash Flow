class Solution {
     int getMax(int[] amount) {
        int maxIndex = 0;
        for (int i = 1; i < amount.length; i++) {
            if (amount[i] > amount[maxIndex]) {
                maxIndex = i;
            }
        }
        return maxIndex;
    }

  
    int getMin(int[] amount) {
        int minIndex = 0;
        for (int i = 1; i < amount.length; i++) {
            if (amount[i] < amount[minIndex]) {
                minIndex = i;
            }
        }
        return minIndex;
    }

    
    void minCashFlowRec(int[] amount, int[][] transaction) {
        int maxCredit = getMax(amount);
        int maxDebit = getMin(amount);

       
        if (amount[maxCredit] == 0 && amount[maxDebit] == 0) {
            return;
        }

       
        int minAmount = Math.min(-amount[maxDebit], amount[maxCredit]);

        
        amount[maxCredit] -= minAmount;
        amount[maxDebit] += minAmount;

       
        transaction[maxDebit][maxCredit] += minAmount;

       
        minCashFlowRec(amount, transaction);
    }

   
    public int[][] minCashFlow(int[][] transaction, int n) {
        
        int[] amount = new int[n];

       
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                amount[i] += (transaction[j][i] - transaction[i][j]);
            }
        }

       
        int[][] result = new int[n][n];
        
        
        minCashFlowRec(amount, result);

      
        return result;
    }
}
