class Solution
{
   static class Cell {
        int x, y, dist;
        
        Cell(int x, int y, int dist) {
            this.x = x;
            this.y = y;
            this.dist = dist;
        }
    }

    
    private static final int[] dx = {-2, -2, -1, -1, 1, 1, 2, 2};
    private static final int[] dy = {-1, 1, -2, 2, -2, 2, -1, 1};

   
    public int minStepToReachTarget(int KnightPos[], int TargetPos[], int N) {
      
        if (KnightPos[0] == TargetPos[0] && KnightPos[1] == TargetPos[1]) {
            return 0;
        }

       
        int startX = KnightPos[0] - 1;
        int startY = KnightPos[1] - 1;
        int targetX = TargetPos[0] - 1;
        int targetY = TargetPos[1] - 1;

       
        boolean[][] visited = new boolean[N][N];

       
        Queue<Cell> queue = new LinkedList<>();
        
       
        queue.add(new Cell(startX, startY, 0));
        visited[startX][startY] = true;

        
        while (!queue.isEmpty()) {
            Cell current = queue.poll();

           
            if (current.x == targetX && current.y == targetY) {
                return current.dist;
            }

           
            for (int i = 0; i < 8; i++) {
                int newX = current.x + dx[i];
                int newY = current.y + dy[i];

                
                if (isValid(newX, newY, N) && !visited[newX][newY]) {
                    visited[newX][newY] = true;
                    queue.add(new Cell(newX, newY, current.dist + 1));
                }
            }
        }

      
        return -1;
    }

    
    private boolean isValid(int x, int y, int N) {
        return x >= 0 && y >= 0 && x < N && y < N;
    }
    }
