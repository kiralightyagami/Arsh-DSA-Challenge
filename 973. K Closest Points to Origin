class Solution {
    public int[][] kClosest(int[][] points, int k) {
        PriorityQueue<int[]> maxHeap = new PriorityQueue<>(new Comparator<int[]>() {
            @Override
            public int compare(int[] a, int[] b) {
                return Integer.compare(b[0], a[0]); 
            }
        });

        for (int[] point : points) {
            int x = point[0];
            int y = point[1];
            int dist = x * x + y * y; 
            
            
            maxHeap.offer(new int[]{dist, x, y});
            
            
            if (maxHeap.size() > k) {
                maxHeap.poll();
            }
        }
        
        
        int[][] result = new int[k][2];
        for (int i = 0; i < k; i++) {
            int[] closest = maxHeap.poll();
            result[i][0] = closest[1];
            result[i][1] = closest[2];
        }
        
        return result;
    }
}
