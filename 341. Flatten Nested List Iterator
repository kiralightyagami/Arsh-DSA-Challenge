public class NestedIterator implements Iterator<Integer> {

    private Stack<Iterator<NestedInteger>> stack;
    private Integer nextElement;

    public NestedIterator(List<NestedInteger> nestedList) {
        stack = new Stack<>();
        stack.push(nestedList.iterator());
        advanceIterator();
    }

    @Override
    public Integer next() {
        Integer result = nextElement;
        advanceIterator();
        return result;
    }

    @Override
    public boolean hasNext() {
        return nextElement != null;
    }

    private void advanceIterator() {
        nextElement = null;
        while (!stack.isEmpty()) {
            Iterator<NestedInteger> currentIterator = stack.peek();
            if (!currentIterator.hasNext()) {
                stack.pop();
            } else {
                NestedInteger ni = currentIterator.next();
                if (ni.isInteger()) {
                    nextElement = ni.getInteger();
                    return;
                } else {
                    stack.push(ni.getList().iterator());
                }
            }
        }
}
}
