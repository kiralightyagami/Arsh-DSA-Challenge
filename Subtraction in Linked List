class Solution {
    public Node subLinkedList(Node l1, Node l2) {
      
        l1 = removeLeadingZeros(l1);
        l2 = removeLeadingZeros(l2);

        
        if (isSmaller(l1, l2)) {
            Node temp = l1;
            l1 = l2;
            l2 = temp;
        }

        
        Node result = subtract(l1, l2);

       
        result = removeLeadingZeros(result);
        return result;
    }

    private Node removeLeadingZeros(Node head) {
        while (head != null && head.data == 0) {
            head = head.next;
        }
        return head == null ? new Node(0) : head;
    }

    private boolean isSmaller(Node l1, Node l2) {
        int len1 = getLength(l1);
        int len2 = getLength(l2);
        if (len1 < len2) return true;
        if (len1 > len2) return false;

        while (l1 != null && l2 != null) {
            if (l1.data < l2.data) return true;
            if (l1.data > l2.data) return false;
            l1 = l1.next;
            l2 = l2.next;
        }
        return false;
    }

    private int getLength(Node head) {
        int length = 0;
        while (head != null) {
            length++;
            head = head.next;
        }
        return length;
    }

    private Node subtract(Node l1, Node l2) {
        Node dummy = new Node(0);
        Node prev = dummy;
        Node p1 = l1, p2 = l2;
        int borrow = 0;

        while (p1 != null) {
            int diff = p1.data - (p2 != null ? p2.data : 0) - borrow;
            if (diff < 0) {
                diff += 10;
                borrow = 1;
            } else {
                borrow = 0;
            }

            prev.next = new Node(diff);
            prev = prev.next;

            if (p1 != null) p1 = p1.next;
            if (p2 != null) p2 = p2.next;
        }

        return dummy.next;
    }
    private static void printList(Node head) {
        while (head != null) {
            System.out.print(head.data);
            head = head.next;
            if (head != null) {
                System.out.print("->");
            }
        }
        System.out.println();
    }
}
