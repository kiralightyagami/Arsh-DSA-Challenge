class Solution {
    static ArrayList<ArrayList<Integer>> uniquePerms(ArrayList<Integer> arr , int n) {
       ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        Collections.sort(arr); // Sort the array to ensure sorted order of permutations
        boolean[] used = new boolean[n];
        ArrayList<Integer> current = new ArrayList<>();
        Set<ArrayList<Integer>> uniquePerms = new HashSet<>();
        backtrack(arr, used, current, result, uniquePerms);
        return result;
    }
    
    private static void backtrack(ArrayList<Integer> arr, boolean[] used, ArrayList<Integer> current,
                                  ArrayList<ArrayList<Integer>> result, Set<ArrayList<Integer>> uniquePerms) {
        if (current.size() == arr.size()) {
            if (uniquePerms.add(new ArrayList<>(current))) {
                result.add(new ArrayList<>(current));
            }
            return;
        }

        for (int i = 0; i < arr.size(); i++) {
            if (used[i] || (i > 0 && arr.get(i).equals(arr.get(i - 1)) && !used[i - 1])) {
                continue;
            }

            used[i] = true;
            current.add(arr.get(i));
            backtrack(arr, used, current, result, uniquePerms);
            current.remove(current.size() - 1);
            used[i] = false;
        }
    }
};
