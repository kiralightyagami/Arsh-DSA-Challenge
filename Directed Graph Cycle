class Solution {
   
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] visited = new boolean[V];
        boolean[] recStack = new boolean[V];
        
       
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
               
                if (isCyclicUtil(i, visited, recStack, adj)) {
                    return true;
                }
            }
        }
       
        return false;
    }
    
   
    private boolean isCyclicUtil(int node, boolean[] visited, boolean[] recStack, ArrayList<ArrayList<Integer>> adj) {
        
        visited[node] = true;
        recStack[node] = true;
        
       
        for (int neighbor : adj.get(node)) {
           
            if (!visited[neighbor]) {
                if (isCyclicUtil(neighbor, visited, recStack, adj)) {
                    return true;
                }
            } 
            
            else if (recStack[neighbor]) {
                return true;
            }
        }
        
        
        recStack[node] = false;
        return false;
    }
    
}
