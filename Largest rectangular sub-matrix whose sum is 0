class Solution {
     public static ArrayList<ArrayList<Integer>> sumZeroMatrix(int[][] mat) {
    int n = mat.length;
        int m = mat[0].length;

        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        int maxArea = 0;
        int startRow = -1, endRow = -1, startCol = -1, endCol = -1;

        
        for (int top = 0; top < n; top++) {
            int[] temp = new int[m];
            for (int bottom = top; bottom < n; bottom++) {

               
                for (int col = 0; col < m; col++) {
                    temp[col] += mat[bottom][col];
                }

              
                HashMap<Integer, Integer> sumMap = new HashMap<>();
                sumMap.put(0, -1); 
                int sum = 0;

                for (int col = 0; col < m; col++) {
                    sum += temp[col];

                    if (sumMap.containsKey(sum)) {
                        int leftCol = sumMap.get(sum) + 1;
                        int area = (bottom - top + 1) * (col - leftCol + 1);

                      
                        if (area > maxArea ||
                                (area == maxArea && leftCol < startCol) ||
                                (area == maxArea && leftCol == startCol && (col - leftCol + 1) < (endCol - startCol + 1))) {
                            maxArea = area;
                            startRow = top;
                            endRow = bottom;
                            startCol = leftCol;
                            endCol = col;
                        }
                    } else {
                        sumMap.put(sum, col);
                    }
                }
            }
        }

       
        if (maxArea == 0) {
            return result;
        }

      
        for (int i = startRow; i <= endRow; i++) {
            ArrayList<Integer> row = new ArrayList<>();
            for (int j = startCol; j <= endCol; j++) {
                row.add(mat[i][j]);
            }
            result.add(row);
        }

        return result;
    }
}
        
