class Solution
{
    
    public int kosaraju(int V, ArrayList<ArrayList<Integer>> adj)
    {
Stack<Integer> stack = new Stack<>();
        boolean[] visited = new boolean[V];
        
        
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                fillOrder(i, visited, stack, adj);
            }
        }
        
       
        ArrayList<ArrayList<Integer>> transpose = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            transpose.add(new ArrayList<>());
        }
        
        
        for (int i = 0; i < V; i++) {
            for (int neighbor : adj.get(i)) {
                transpose.get(neighbor).add(i);
            }
        }
        

        visited = new boolean[V];
        int sccCount = 0;
        
        while (!stack.isEmpty()) {
            int node = stack.pop();
            if (!visited[node]) {
               
                dfs(node, visited, transpose);
                sccCount++;
            }
        }
        
        return sccCount;
    }
    
    
    private void fillOrder(int v, boolean[] visited, Stack<Integer> stack, ArrayList<ArrayList<Integer>> adj) {
        visited[v] = true;
        for (int neighbor : adj.get(v)) {
            if (!visited[neighbor]) {
                fillOrder(neighbor, visited, stack, adj);
            }
        }
        stack.push(v);
    }
    
  
    private void dfs(int v, boolean[] visited, ArrayList<ArrayList<Integer>> adj) {
        visited[v] = true;
        for (int neighbor : adj.get(v)) {
            if (!visited[neighbor]) {
                dfs(neighbor, visited, adj);
            }
        }
    }
    
}
