class Solution {
    public String minWindow(String s, String t) {
         if (s == null || t == null || s.length() < t.length()) {
            return "";
        }

        // Create a map to store the count of characters in t
        Map<Character, Integer> charCountMap = new HashMap<>();
        for (char c : t.toCharArray()) {
            charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);
        }

        // Variables to keep track of the window
        int left = 0, right = 0;
        int required = charCountMap.size();
        int formed = 0;
        Map<Character, Integer> windowCounts = new HashMap<>();
        int[] ans = {-1, 0, 0}; // length of the window, left, right

        while (right < s.length()) {
            char c = s.charAt(right);
            windowCounts.put(c, windowCounts.getOrDefault(c, 0) + 1);

            if (charCountMap.containsKey(c) && windowCounts.get(c).intValue() == charCountMap.get(c).intValue()) {
                formed++;
            }

            // Try to contract the window till it ceases to be 'desirable'
            while (left <= right && formed == required) {
                c = s.charAt(left);

                // Save the smallest window until now
                if (ans[0] == -1 || right - left + 1 < ans[0]) {
                    ans[0] = right - left + 1;
                    ans[1] = left;
                    ans[2] = right;
                }

                // The character at the position pointed by the `left` pointer is no longer a part of the window
                windowCounts.put(c, windowCounts.get(c) - 1);
                if (charCountMap.containsKey(c) && windowCounts.get(c).intValue() < charCountMap.get(c).intValue()) {
                    formed--;
                }

                // Move the left pointer ahead
                left++;
            }

            // Keep expanding the window by moving the right pointer
            right++;
        }

        return ans[0] == -1 ? "" : s.substring(ans[1], ans[2] + 1);
    
    }
}
