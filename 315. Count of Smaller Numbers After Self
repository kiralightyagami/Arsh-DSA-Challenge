class Solution {
    private static class Pair {
        int val;
        int index;

        Pair(int val, int index) {
            this.val = val;
            this.index = index;
        }
    }

    public List<Integer> countSmaller(int[] nums) {
        int n = nums.length;
        Integer[] result = new Integer[n];
        Pair[] pairs = new Pair[n];
        
        for (int i = 0; i < n; i++) {
            pairs[i] = new Pair(nums[i], i);
            result[i] = 0;
        }
        
        mergeSortAndCount(pairs, result, 0, n - 1);
        return Arrays.asList(result);
    }

    private void mergeSortAndCount(Pair[] pairs, Integer[] result, int left, int right) {
        if (left >= right) return;
        
        int mid = left + (right - left) / 2;
        mergeSortAndCount(pairs, result, left, mid);
        mergeSortAndCount(pairs, result, mid + 1, right);
        
        merge(pairs, result, left, mid, right);
    }

    private void merge(Pair[] pairs, Integer[] result, int left, int mid, int right) {
        List<Pair> sorted = new ArrayList<>();
        int leftIndex = left;
        int rightIndex = mid + 1;
        int rightCount = 0;

        while (leftIndex <= mid && rightIndex <= right) {
            if (pairs[leftIndex].val > pairs[rightIndex].val) {
                sorted.add(pairs[rightIndex]);
                rightCount++;
                rightIndex++;
            } else {
                sorted.add(pairs[leftIndex]);
                result[pairs[leftIndex].index] += rightCount;
                leftIndex++;
            }
        }

        while (leftIndex <= mid) {
            sorted.add(pairs[leftIndex]);
            result[pairs[leftIndex].index] += rightCount;
            leftIndex++;
        }

        while (rightIndex <= right) {
            sorted.add(pairs[rightIndex]);
            rightIndex++;
        }

        for (int i = left; i <= right; i++) {
            pairs[i] = sorted.get(i - left);
        }
    }
}
