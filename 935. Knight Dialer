class Solution {
    private static final int MOD = 1_000_000_007;

    public int knightDialer(int n) {
        
        int[][] moves = {
            {4, 6}, // 0 -> 4, 6
            {6, 8}, // 1 -> 6, 8
            {7, 9}, // 2 -> 7, 9
            {4, 8}, // 3 -> 4, 8
            {0, 3, 9}, // 4 -> 0, 3, 9
            {}, // 5 has no valid moves
            {0, 1, 7}, // 6 -> 0, 1, 7
            {2, 6}, // 7 -> 2, 6
            {1, 3}, // 8 -> 1, 3
            {2, 4}  // 9 -> 2, 4
        };
        
        
        int[][] dp = new int[n + 1][10];
        
        
        for (int i = 0; i <= 9; i++) {
            dp[1][i] = 1;
        }
        
       
        for (int i = 2; i <= n; i++) {
            for (int digit = 0; digit <= 9; digit++) {
                for (int move : moves[digit]) {
                    dp[i][digit] = (dp[i][digit] + dp[i - 1][move]) % MOD;
                }
            }
        }
        
        
        int result = 0;
        for (int i = 0; i <= 9; i++) {
            result = (result + dp[n][i]) % MOD;
        }
        return result;
    }
}
