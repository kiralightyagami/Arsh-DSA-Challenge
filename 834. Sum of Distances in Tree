class Solution {
    private int[] answer;
    private int[] subtreeSize;
    private List<Set<Integer>> tree;
    public int[] sumOfDistancesInTree(int n, int[][] edges) {
     
        answer = new int[n];
        subtreeSize = new int[n];
        tree = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            tree.add(new HashSet<>());
        }

        
        for (int[] edge : edges) {
            int u = edge[0], v = edge[1];
            tree.get(u).add(v);
            tree.get(v).add(u);
        }

      
        dfs1(0, -1);

      
        dfs2(0, -1);

        return answer;
    }

    private void dfs1(int node, int parent) {
        subtreeSize[node] = 1;
        for (int neighbor : tree.get(node)) {
            if (neighbor == parent) continue;
            dfs1(neighbor, node);
            subtreeSize[node] += subtreeSize[neighbor];
            answer[0] += answer[neighbor] + subtreeSize[neighbor];
        }
    }

    private void dfs2(int node, int parent) {
        for (int neighbor : tree.get(node)) {
            if (neighbor == parent) continue;
            answer[neighbor] = answer[node] - subtreeSize[neighbor] + (answer.length - subtreeSize[neighbor]);
            dfs2(neighbor, node);
        }
    }
}
