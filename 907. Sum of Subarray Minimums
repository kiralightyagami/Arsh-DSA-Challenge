class Solution {
    public int sumSubarrayMins(int[] arr) {
        int MOD = 1_000_000_007;
        int n = arr.length;

        
        int[] prevLess = new int[n];
        int[] nextLess = new int[n];
        Stack<Integer> stack = new Stack<>();

        
        Arrays.fill(prevLess, -1);
        Arrays.fill(nextLess, n);

      
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                prevLess[i] = stack.peek();
            }
            stack.push(i);
        }

        stack.clear();

       
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                nextLess[i] = stack.peek();
            }
            stack.push(i);
        }

      
        long sum = 0;
        for (int i = 0; i < n; i++) {
            long count = (long)(i - prevLess[i]) * (nextLess[i] - i) % MOD;
            sum = (sum + count * arr[i] % MOD) % MOD;
        }

        return (int)sum;
    
    }
}
