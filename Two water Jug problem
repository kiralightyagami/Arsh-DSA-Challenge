class Solution
{
    private int gcd(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }

    
    private int pourWater(int fromCap, int toCap, int d) {
       
        int from = fromCap;
        int to = 0;
        int steps = 1; 

        while (from != d && to != d) {
            
            int temp = Math.min(from, toCap - to);

            
            to += temp;
            from -= temp;

            
            steps++;

            
            if (from == d || to == d) break;

            
            if (from == 0) {
                from = fromCap;
                steps++;
            }

            
            if (to == toCap) {
                to = 0;
                steps++;
            }
        }

        return steps;
    }

   
    public int minSteps(int m, int n, int d) {
        
        if (d > Math.max(m, n)) return -1;

        
        if (d % gcd(m, n) != 0) return -1;

        
        return Math.min(pourWater(m, n, d), pourWater(n, m, d));
    }
}
