class Solution
{
    static int optimalSearchTree(int keys[], int freq[], int n)
    {
       int[][] dp = new int[n][n];

       
        for (int i = 0; i < n; i++) {
            dp[i][i] = freq[i];
        }

       
        for (int length = 2; length <= n; length++) {
            for (int i = 0; i <= n - length; i++) {
                int j = i + length - 1;
                dp[i][j] = Integer.MAX_VALUE;

               
                int freqSum = sum(freq, i, j);

               
                for (int r = i; r <= j; r++) {
                    int cost = (r > i ? dp[i][r - 1] : 0) + 
                               (r < j ? dp[r + 1][j] : 0) + 
                               freqSum;
                    dp[i][j] = Math.min(dp[i][j], cost);
                }
            }
        }

        
        return dp[0][n - 1];
    }

    
    static int sum(int freq[], int i, int j) {
        int s = 0;
        for (int k = i; k <= j; k++) {
            s += freq[k];
        }
        return s;
    }
}
