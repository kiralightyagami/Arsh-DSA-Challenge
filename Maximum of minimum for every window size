class Solution 
{
    
    static int[] maxOfMin(int[] arr, int n) 
    {
        
        int[] left = new int[n];
        int[] right = new int[n];
        
        
        Arrays.fill(left, -1);
        Arrays.fill(right, n);

        
        Stack<Integer> stack = new Stack<>();

        
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                left[i] = stack.peek();
            }
            stack.push(i);
        }

        
        stack.clear();

        
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                right[i] = stack.peek();
            }
            stack.push(i);
        }

        
        int[] ans = new int[n];

        
        for (int i = 0; i < n; i++) {
            
            int len = right[i] - left[i] - 1;

          
            ans[len - 1] = Math.max(ans[len - 1], arr[i]);
        }

      
        for (int i = n - 2; i >= 0; i--) {
            ans[i] = Math.max(ans[i], ans[i + 1]);
        }

        return ans;
    }
}
