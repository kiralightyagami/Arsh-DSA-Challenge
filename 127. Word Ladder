class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> wordSet = new HashSet<>(wordList);
        
       
        if (!wordSet.contains(endWord)) {
            return 0;
        }
        
        
        Queue<String> queue = new LinkedList<>();
        queue.add(beginWord);
        
       
        Set<String> visited = new HashSet<>();
        visited.add(beginWord);
        
        int level = 1; 
        
        while (!queue.isEmpty()) {
            int levelSize = queue.size();
            for (int i = 0; i < levelSize; i++) {
                String word = queue.poll();
                
                
                for (int j = 0; j < word.length(); j++) {
                    char[] wordArray = word.toCharArray();
                    for (char c = 'a'; c <= 'z'; c++) {
                        char originalChar = wordArray[j];
                        if (originalChar == c) continue;
                        wordArray[j] = c;
                        String newWord = new String(wordArray);
                        
                       
                        if (newWord.equals(endWord)) {
                            return level + 1;
                        }
                        
                       
                        if (wordSet.contains(newWord) && !visited.contains(newWord)) {
                            queue.add(newWord);
                            visited.add(newWord);
                        }
                    }
                }
            }
            level++;
        }
        
        
        return 0;
    }
}
