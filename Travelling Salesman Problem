class Solution {
    public int total_cost(int[][] cost) {
        int n = cost.length;
        int[][] dp = new int[n][1 << n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(dp[i], -1);
        }
        return tsp(cost, dp, 0, 1, n);
    }

    private int tsp(int[][] cost, int[][] dp, int currentCity, int mask, int n) {
       
        if (mask == (1 << n) - 1) {
            return cost[currentCity][0];
        }

        
        if (dp[currentCity][mask] != -1) {
            return dp[currentCity][mask];
        }

        int minCost = Integer.MAX_VALUE;

        
        for (int nextCity = 0; nextCity < n; nextCity++) {
            if ((mask & (1 << nextCity)) == 0) { // If nextCity has not been visited
                int newMask = mask | (1 << nextCity);
                int newCost = cost[currentCity][nextCity] + tsp(cost, dp, nextCity, newMask, n);
                minCost = Math.min(minCost, newCost);
            }
        }

        
        dp[currentCity][mask] = minCost;
        return minCost;
    }
}
