class Solution {
    public ArrayList<String> findPath(int[][] mat) {
        ArrayList<String> result = new ArrayList<>();
        if (mat == null || mat.length == 0 || mat[0].length == 0 || mat[0][0] == 0) {
            return result;
        }
        
        int n = mat.length;
        boolean[][] visited = new boolean[n][n];
        dfs(mat, 0, 0, n, visited, "", result);
        return result;
    }
    
    private void dfs(int[][] mat, int i, int j, int n, boolean[][] visited, String path, ArrayList<String> result) {
        
        if (i == n - 1 && j == n - 1) {
            result.add(path);
            return;
        }
        
        
        visited[i][j] = true;
        
        
        if (isSafe(mat, i + 1, j, n, visited)) {
            dfs(mat, i + 1, j, n, visited, path + "D", result);
        }
        
       
        if (isSafe(mat, i, j + 1, n, visited)) {
            dfs(mat, i, j + 1, n, visited, path + "R", result);
        }
        
       
        if (isSafe(mat, i - 1, j, n, visited)) {
            dfs(mat, i - 1, j, n, visited, path + "U", result);
        }
        
       
        if (isSafe(mat, i, j - 1, n, visited)) {
            dfs(mat, i, j - 1, n, visited, path + "L", result);
        }
        
        
        visited[i][j] = false;
    }
    
    private boolean isSafe(int[][] mat, int i, int j, int n, boolean[][] visited) {
        return i >= 0 && i < n && j >= 0 && j < n && mat[i][j] == 1 && !visited[i][j];
    
    }
}
